# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I1seyAcBBKAn4978OyIICh_HcfClVGy3
"""

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy.stats import chi2_contingency"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading Datasets and creating DataFrames\n",
    "\n",
    "df_t = pd.read_csv('SAML-D.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sender_account</th>\n",
       "      <th>Receiver_account</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Payment_currency</th>\n",
       "      <th>Received_currency</th>\n",
       "      <th>Sender_bank_location</th>\n",
       "      <th>Receiver_bank_location</th>\n",
       "      <th>Payment_type</th>\n",
       "      <th>Is_laundering</th>\n",
       "      <th>Laundering_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10:35:19</td>\n",
       "      <td>2022-10-07</td>\n",
       "      <td>8724731955</td>\n",
       "      <td>2769355426</td>\n",
       "      <td>1459.15</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK</td>\n",
       "      <td>UK</td>\n",
       "      <td>Cash Deposit</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal_Cash_Deposits</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10:35:20</td>\n",
       "      <td>2022-10-07</td>\n",
       "      <td>1491989064</td>\n",
       "      <td>8401255335</td>\n",
       "      <td>6019.64</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>Dirham</td>\n",
       "      <td>UK</td>\n",
       "      <td>UAE</td>\n",
       "      <td>Cross-border</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal_Fan_Out</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10:35:20</td>\n",
       "      <td>2022-10-07</td>\n",
       "      <td>287305149</td>\n",
       "      <td>4404767002</td>\n",
       "      <td>14328.44</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK</td>\n",
       "      <td>UK</td>\n",
       "      <td>Cheque</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal_Small_Fan_Out</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10:35:21</td>\n",
       "      <td>2022-10-07</td>\n",
       "      <td>5376652437</td>\n",
       "      <td>9600420220</td>\n",
       "      <td>11895.00</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK</td>\n",
       "      <td>UK</td>\n",
       "      <td>ACH</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal_Fan_In</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10:35:21</td>\n",
       "      <td>2022-10-07</td>\n",
       "      <td>9614186178</td>\n",
       "      <td>3803336972</td>\n",
       "      <td>115.25</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK</td>\n",
       "      <td>UK</td>\n",
       "      <td>Cash Deposit</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal_Cash_Deposits</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Time        Date  Sender_account  Receiver_account    Amount  \\\n",
       "0  10:35:19  2022-10-07      8724731955        2769355426   1459.15   \n",
       "1  10:35:20  2022-10-07      1491989064        8401255335   6019.64   \n",
       "2  10:35:20  2022-10-07       287305149        4404767002  14328.44   \n",
       "3  10:35:21  2022-10-07      5376652437        9600420220  11895.00   \n",
       "4  10:35:21  2022-10-07      9614186178        3803336972    115.25   \n",
       "\n",
       "  Payment_currency Received_currency Sender_bank_location  \\\n",
       "0        UK pounds         UK pounds                   UK   \n",
       "1        UK pounds            Dirham                   UK   \n",
       "2        UK pounds         UK pounds                   UK   \n",
       "3        UK pounds         UK pounds                   UK   \n",
       "4        UK pounds         UK pounds                   UK   \n",
       "\n",
       "  Receiver_bank_location  Payment_type  Is_laundering       Laundering_type  \n",
       "0                     UK  Cash Deposit              0  Normal_Cash_Deposits  \n",
       "1                    UAE  Cross-border              0        Normal_Fan_Out  \n",
       "2                     UK        Cheque              0  Normal_Small_Fan_Out  \n",
       "3                     UK           ACH              0         Normal_Fan_In  \n",
       "4                     UK  Cash Deposit              0  Normal_Cash_Deposits  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9504852, 12)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Time                      9504852\n",
       "Date                      9504852\n",
       "Sender_account            9504852\n",
       "Receiver_account          9504852\n",
       "Amount                    9504852\n",
       "Payment_currency          9504852\n",
       "Received_currency         9504852\n",
       "Sender_bank_location      9504852\n",
       "Receiver_bank_location    9504852\n",
       "Payment_type              9504852\n",
       "Is_laundering             9504852\n",
       "Laundering_type           9504852\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking for missing values\n",
    "df_t.notnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Time                      0\n",
       "Date                      0\n",
       "Sender_account            0\n",
       "Receiver_account          0\n",
       "Amount                    0\n",
       "Payment_currency          0\n",
       "Received_currency         0\n",
       "Sender_bank_location      0\n",
       "Receiver_bank_location    0\n",
       "Payment_type              0\n",
       "Is_laundering             0\n",
       "Laundering_type           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Time', 'Date', 'Sender_account', 'Receiver_account', 'Amount',\n",
       "       'Payment_currency', 'Received_currency', 'Sender_bank_location',\n",
       "       'Receiver_bank_location', 'Payment_type', 'Is_laundering',\n",
       "       'Laundering_type'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Time                       object\n",
       "Date                       object\n",
       "Sender_account              int64\n",
       "Receiver_account            int64\n",
       "Amount                    float64\n",
       "Payment_currency           object\n",
       "Received_currency          object\n",
       "Sender_bank_location       object\n",
       "Receiver_bank_location     object\n",
       "Payment_type               object\n",
       "Is_laundering               int64\n",
       "Laundering_type            object\n",
       "dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count      9504852\n",
       "unique       86400\n",
       "top       15:22:42\n",
       "freq           201\n",
       "Name: Time, dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Time'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7ff99b4d4710>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_t['Time'].value_counts().plot(kind='line')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count        9504852\n",
       "unique           321\n",
       "top       2023-02-09\n",
       "freq           36645\n",
       "Name: Date, dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Date'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2023-02-09    36645\n",
       "2023-02-01    35910\n",
       "2023-02-06    35038\n",
       "2023-02-22    34566\n",
       "2022-12-23    34156\n",
       "              ...  \n",
       "2022-12-31    25808\n",
       "2022-10-30    25298\n",
       "2022-10-23    23719\n",
       "2022-10-07    20892\n",
       "2023-08-23     8400\n",
       "Name: Date, Length: 321, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Date'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Converting the attribute into datetime dtype\n",
    "days = pd.to_datetime(df_t['Date'])\n",
    "\n",
    "# Plot histogram\n",
    "plt.figure(figsize=(14, 8))\n",
    "#plt.hist(days_transactions, bins=len(days_transactions.unique()))\n",
    "plt.hist(days, bins=len(days.unique()), edgecolor='black')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Histogram - Day')\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    9.504852e+06\n",
       "mean     5.006619e+09\n",
       "std      2.885814e+09\n",
       "min      9.018000e+03\n",
       "25%      2.513133e+09\n",
       "50%      5.001017e+09\n",
       "75%      7.505051e+09\n",
       "max      9.999987e+09\n",
       "Name: Sender_account, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Sender_account'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4808614002    754\n",
       "2938210715    753\n",
       "5579295130    751\n",
       "2357599526    749\n",
       "3831533348    749\n",
       "             ... \n",
       "5364650131      1\n",
       "1081353812      1\n",
       "598236635       1\n",
       "5262466443      1\n",
       "5196793831      1\n",
       "Name: Sender_account, Length: 292715, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Sender_account'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Top 25 Bank Sender by Frequency of Transactions')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualising the Top 25 Sender's Bank by Frequency of Transactions\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "df_t['Sender_account'].value_counts().head(25).plot(kind='bar')\n",
    "\n",
    "# Label the axes and add a title\n",
    "plt.xlabel('From Bank - Sender')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Top 25 Bank Sender by Frequency of Transactions')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    9.504852e+06\n",
       "mean     5.006006e+09\n",
       "std      2.884763e+09\n",
       "min      9.018000e+03\n",
       "25%      2.513219e+09\n",
       "50%      5.002572e+09\n",
       "75%      7.502397e+09\n",
       "max      9.999971e+09\n",
       "Name: Receiver_account, dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Receiver_account'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8600542721    751\n",
       "2938210715    745\n",
       "5460360634    740\n",
       "5579295130    739\n",
       "4808614002    737\n",
       "             ... \n",
       "7063289464      1\n",
       "5986715112      1\n",
       "1120485786      1\n",
       "2035380551      1\n",
       "8711894141      1\n",
       "Name: Receiver_account, Length: 652266, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Receiver_account'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Top 25 Bank RECEIVER by Frequency of Transactions')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualising the Top 25 Receiver's Bank by Frequency of Transactions\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "df_t['Receiver_account'].value_counts().head(25).plot(kind='bar')\n",
    "\n",
    "# Label the axes and add a title\n",
    "plt.xlabel('From Bank - Receiver')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Top 25 Bank RECEIVER by Frequency of Transactions')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    9504852\n",
       "mean        8763\n",
       "std        25615\n",
       "min            4\n",
       "25%         2144\n",
       "50%         6114\n",
       "75%        10458\n",
       "max     12618498\n",
       "Name: Amount, dtype: float64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set the display format to avoid scientific notation\n",
    "pd.options.display.float_format = '{:.0f}'.format\n",
    "\n",
    "df_t['Amount'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualisation \n",
    "plt.figure(figsize=(12, 6))\n",
    "df_t['Amount'].value_counts().plot(kind ='hist', bins = 50, edgecolor='black', log=True)\n",
    "\n",
    "# Label the axes and add a title\n",
    "plt.xlabel('Amount Received')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Histogram of Amount Received')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count       9504852\n",
       "unique           13\n",
       "top       UK pounds\n",
       "freq        9099293\n",
       "Name: Payment_currency, dtype: object"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Payment_currency'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "UK pounds          9099293\n",
       "Euro                117164\n",
       "Turkish lira         27996\n",
       "Swiss franc          27492\n",
       "Dirham               27263\n",
       "Pakistani rupee      27196\n",
       "Naira                27143\n",
       "US dollar            26061\n",
       "Yen                  25562\n",
       "Moroccan dirham      25395\n",
       "Mexican Peso         24852\n",
       "Albanian lek         24778\n",
       "Indian rupee         24657\n",
       "Name: Payment_currency, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Payment_currency'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count       9504852\n",
       "unique           13\n",
       "top       UK pounds\n",
       "freq        8783655\n",
       "Name: Received_currency, dtype: object"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Received_currency'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "UK pounds          8783655\n",
       "Euro                231911\n",
       "Pakistani rupee      45993\n",
       "Yen                  45814\n",
       "Moroccan dirham      45748\n",
       "Albanian lek         45736\n",
       "Mexican Peso         45255\n",
       "Naira                45046\n",
       "Indian rupee         43757\n",
       "US dollar            43664\n",
       "Swiss franc          42931\n",
       "Dirham               42797\n",
       "Turkish lira         42545\n",
       "Name: Received_currency, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Received_currency'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     9504852\n",
       "unique         18\n",
       "top            UK\n",
       "freq      9183088\n",
       "Name: Sender_bank_location, dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Sender_bank_location'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "UK             9183088\n",
       "Turkey           20902\n",
       "Switzerland      20503\n",
       "Pakistan         20346\n",
       "UAE              20081\n",
       "Nigeria          20027\n",
       "Spain            19391\n",
       "Germany          19259\n",
       "USA              19027\n",
       "Italy            18895\n",
       "France           18702\n",
       "Japan            18468\n",
       "Morocco          18437\n",
       "Austria          18050\n",
       "Mexico           17662\n",
       "Albania          17648\n",
       "India            17596\n",
       "Netherlands      16770\n",
       "Name: Sender_bank_location, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Sender_bank_location'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     9504852\n",
       "unique         18\n",
       "top            UK\n",
       "freq      8864634\n",
       "Name: Receiver_bank_location, dtype: object"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Receiver_bank_location'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "UK             8864634\n",
       "Pakistan         38980\n",
       "Austria          38844\n",
       "Albania          38783\n",
       "Japan            38729\n",
       "Morocco          38704\n",
       "Germany          38540\n",
       "France           38512\n",
       "Mexico           38385\n",
       "Nigeria          38272\n",
       "Netherlands      37314\n",
       "Spain            37288\n",
       "India            36936\n",
       "USA              36850\n",
       "Italy            36517\n",
       "Switzerland      36081\n",
       "UAE              35897\n",
       "Turkey           35586\n",
       "Name: Receiver_bank_location, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Receiver_bank_location'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count         9504852\n",
       "unique              7\n",
       "top       Credit card\n",
       "freq          2012909\n",
       "Name: Payment_type, dtype: object"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Payment_type'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 6))\n",
    "\n",
    "df_t['Payment_type'].value_counts().plot(kind='barh')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count                  9504852\n",
       "unique                      28\n",
       "top       Normal_Small_Fan_Out\n",
       "freq                   3477717\n",
       "Name: Laundering_type, dtype: object"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Laundering_type'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Normal_Small_Fan_Out      3477717\n",
       "Normal_Fan_Out            2302220\n",
       "Normal_Fan_In             2104285\n",
       "Normal_Group               528351\n",
       "Normal_Cash_Withdrawal     305031\n",
       "Normal_Cash_Deposits       223801\n",
       "Normal_Periodical          210526\n",
       "Normal_Plus_Mutual         155041\n",
       "Normal_Mutual              125335\n",
       "Normal_Foward               42031\n",
       "Normal_single_large         20641\n",
       "Structuring                  1870\n",
       "Cash_Withdrawal              1334\n",
       "Deposit-Send                  945\n",
       "Smurfing                      932\n",
       "Layered_Fan_In                656\n",
       "Layered_Fan_Out               529\n",
       "Stacked Bipartite             506\n",
       "Behavioural_Change_1          394\n",
       "Bipartite                     383\n",
       "Cycle                         382\n",
       "Fan_In                        364\n",
       "Gather-Scatter                354\n",
       "Behavioural_Change_2          345\n",
       "Scatter-Gather                338\n",
       "Single_large                  250\n",
       "Fan_Out                       237\n",
       "Over-Invoicing                 54\n",
       "Name: Laundering_type, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Laundering_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 6))\n",
    "df_t['Laundering_type'].value_counts().plot(kind = 'bar')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define the figure size correctly\n",
    "plt.figure(figsize=(10, 7))\n",
    "\n",
    "# Create scatter plot\n",
    "plt.scatter(df_t['Amount'], df_t['Laundering_type'], c=df_t['Amount'], cmap='rainbow')\n",
    "\n",
    "# Add a title to the plot\n",
    "plt.title('Clustering of Laundering Types by Amount')\n",
    "\n",
    "# Label the axes\n",
    "plt.xlabel('Amount')\n",
    "plt.ylabel('Laundering Types')\n",
    "\n",
    "# Add a color bar to indicate the color mapping\n",
    "plt.colorbar(label='Amount')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count   9504852\n",
       "mean          0\n",
       "std           0\n",
       "min           0\n",
       "25%           0\n",
       "50%           0\n",
       "75%           0\n",
       "max           1\n",
       "Name: Is_laundering, dtype: float64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Is_laundering'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    9494979\n",
       "1       9873\n",
       "Name: Is_laundering, dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t['Is_laundering'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 8))\n",
    "df_t['Is_laundering'].value_counts().plot(kind='pie', autopct='%1.1f%%', title = 'Genuine vs Illegal Transactions')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Time                       object\n",
       "Date                       object\n",
       "Sender_account              int64\n",
       "Receiver_account            int64\n",
       "Amount                    float64\n",
       "Payment_currency           object\n",
       "Received_currency          object\n",
       "Sender_bank_location       object\n",
       "Receiver_bank_location     object\n",
       "Payment_type               object\n",
       "Is_laundering               int64\n",
       "Laundering_type            object\n",
       "dtype: object"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Normalisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Convert 'Date' to a numerical format \n",
    "df_t['Date'] = pd.to_datetime(df_t['Date'])\n",
    "df_t['Date'] = df_t['Date'].map(pd.Timestamp.timestamp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# If 'Time' is in a datetime format or string, convert to seconds since start of the day\n",
    "df_t['Time'] = pd.to_datetime(df_t['Time'], format='%H:%M:%S').dt.time.apply(lambda x: x.hour * 3600 + x.minute * 60 + x.second)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sender_account</th>\n",
       "      <th>Receiver_account</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Payment_currency</th>\n",
       "      <th>Received_currency</th>\n",
       "      <th>Sender_bank_location</th>\n",
       "      <th>Receiver_bank_location</th>\n",
       "      <th>Payment_type</th>\n",
       "      <th>Is_laundering</th>\n",
       "      <th>Laundering_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38119</td>\n",
       "      <td>1665100800</td>\n",
       "      <td>8724731955</td>\n",
       "      <td>2769355426</td>\n",
       "      <td>1459</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK</td>\n",
       "      <td>UK</td>\n",
       "      <td>Cash Deposit</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal_Cash_Deposits</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38120</td>\n",
       "      <td>1665100800</td>\n",
       "      <td>1491989064</td>\n",
       "      <td>8401255335</td>\n",
       "      <td>6020</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>Dirham</td>\n",
       "      <td>UK</td>\n",
       "      <td>UAE</td>\n",
       "      <td>Cross-border</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal_Fan_Out</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38120</td>\n",
       "      <td>1665100800</td>\n",
       "      <td>287305149</td>\n",
       "      <td>4404767002</td>\n",
       "      <td>14328</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK</td>\n",
       "      <td>UK</td>\n",
       "      <td>Cheque</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal_Small_Fan_Out</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38121</td>\n",
       "      <td>1665100800</td>\n",
       "      <td>5376652437</td>\n",
       "      <td>9600420220</td>\n",
       "      <td>11895</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK</td>\n",
       "      <td>UK</td>\n",
       "      <td>ACH</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal_Fan_In</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>38121</td>\n",
       "      <td>1665100800</td>\n",
       "      <td>9614186178</td>\n",
       "      <td>3803336972</td>\n",
       "      <td>115</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK pounds</td>\n",
       "      <td>UK</td>\n",
       "      <td>UK</td>\n",
       "      <td>Cash Deposit</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal_Cash_Deposits</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Time       Date  Sender_account  Receiver_account  Amount  \\\n",
       "0  38119 1665100800      8724731955        2769355426    1459   \n",
       "1  38120 1665100800      1491989064        8401255335    6020   \n",
       "2  38120 1665100800       287305149        4404767002   14328   \n",
       "3  38121 1665100800      5376652437        9600420220   11895   \n",
       "4  38121 1665100800      9614186178        3803336972     115   \n",
       "\n",
       "  Payment_currency Received_currency Sender_bank_location  \\\n",
       "0        UK pounds         UK pounds                   UK   \n",
       "1        UK pounds            Dirham                   UK   \n",
       "2        UK pounds         UK pounds                   UK   \n",
       "3        UK pounds         UK pounds                   UK   \n",
       "4        UK pounds         UK pounds                   UK   \n",
       "\n",
       "  Receiver_bank_location  Payment_type  Is_laundering       Laundering_type  \n",
       "0                     UK  Cash Deposit              0  Normal_Cash_Deposits  \n",
       "1                    UAE  Cross-border              0        Normal_Fan_Out  \n",
       "2                     UK        Cheque              0  Normal_Small_Fan_Out  \n",
       "3                     UK           ACH              0         Normal_Fan_In  \n",
       "4                     UK  Cash Deposit              0  Normal_Cash_Deposits  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Time                        int64\n",
       "Date                      float64\n",
       "Sender_account              int64\n",
       "Receiver_account            int64\n",
       "Amount                    float64\n",
       "Payment_currency           object\n",
       "Received_currency          object\n",
       "Sender_bank_location       object\n",
       "Receiver_bank_location     object\n",
       "Payment_type               object\n",
       "Is_laundering               int64\n",
       "Laundering_type            object\n",
       "dtype: object"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Converting Categorical Data into numercial data\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "LE = LabelEncoder()\n",
    "\n",
    "columns_to_encode = ['Payment_currency', 'Received_currency', 'Sender_bank_location',\n",
    "       'Receiver_bank_location', 'Payment_type','Laundering_type']\n",
    "\n",
    "for column in columns_to_encode:\n",
    "    df_t[column] = LE.fit_transform(df_t[column])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sender_account</th>\n",
       "      <th>Receiver_account</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Payment_currency</th>\n",
       "      <th>Received_currency</th>\n",
       "      <th>Sender_bank_location</th>\n",
       "      <th>Receiver_bank_location</th>\n",
       "      <th>Payment_type</th>\n",
       "      <th>Is_laundering</th>\n",
       "      <th>Laundering_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38119</td>\n",
       "      <td>1665100800</td>\n",
       "      <td>8724731955</td>\n",
       "      <td>2769355426</td>\n",
       "      <td>1459</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38120</td>\n",
       "      <td>1665100800</td>\n",
       "      <td>1491989064</td>\n",
       "      <td>8401255335</td>\n",
       "      <td>6020</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38120</td>\n",
       "      <td>1665100800</td>\n",
       "      <td>287305149</td>\n",
       "      <td>4404767002</td>\n",
       "      <td>14328</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38121</td>\n",
       "      <td>1665100800</td>\n",
       "      <td>5376652437</td>\n",
       "      <td>9600420220</td>\n",
       "      <td>11895</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>38121</td>\n",
       "      <td>1665100800</td>\n",
       "      <td>9614186178</td>\n",
       "      <td>3803336972</td>\n",
       "      <td>115</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Time       Date  Sender_account  Receiver_account  Amount  \\\n",
       "0  38119 1665100800      8724731955        2769355426    1459   \n",
       "1  38120 1665100800      1491989064        8401255335    6020   \n",
       "2  38120 1665100800       287305149        4404767002   14328   \n",
       "3  38121 1665100800      5376652437        9600420220   11895   \n",
       "4  38121 1665100800      9614186178        3803336972     115   \n",
       "\n",
       "   Payment_currency  Received_currency  Sender_bank_location  \\\n",
       "0                10                 10                    16   \n",
       "1                10                  1                    16   \n",
       "2                10                 10                    16   \n",
       "3                10                 10                    16   \n",
       "4                10                 10                    16   \n",
       "\n",
       "   Receiver_bank_location  Payment_type  Is_laundering  Laundering_type  \n",
       "0                      16             1              0               11  \n",
       "1                      15             5              0               14  \n",
       "2                      16             3              0               20  \n",
       "3                      16             0              0               13  \n",
       "4                      16             1              0               11  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sender_account</th>\n",
       "      <th>Receiver_account</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Payment_currency</th>\n",
       "      <th>Received_currency</th>\n",
       "      <th>Sender_bank_location</th>\n",
       "      <th>Receiver_bank_location</th>\n",
       "      <th>Payment_type</th>\n",
       "      <th>Is_laundering</th>\n",
       "      <th>Laundering_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.716449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.775333</td>\n",
       "      <td>-0.285139</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.716400</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.107099</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>-1.00000</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>-0.191672</td>\n",
       "      <td>0.793335</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.678404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.716400</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-0.208419</td>\n",
       "      <td>0.217274</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-0.156956</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.716352</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.128225</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.122274</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.989758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.716352</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.416904</td>\n",
       "      <td>-0.337604</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504847</th>\n",
       "      <td>-0.653242</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.884564</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-0.254372</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504848</th>\n",
       "      <td>-0.652999</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.142335</td>\n",
       "      <td>-0.305907</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504849</th>\n",
       "      <td>-0.652999</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.788586</td>\n",
       "      <td>-0.696931</td>\n",
       "      <td>-0.285295</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504850</th>\n",
       "      <td>-0.652756</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-0.066970</td>\n",
       "      <td>0.672761</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.989758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504851</th>\n",
       "      <td>-0.652708</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.630550</td>\n",
       "      <td>0.032134</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.678404</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9504852 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Time  Date  Sender_account  Receiver_account    Amount  \\\n",
       "0       -0.716449  -1.0        1.000000         -0.775333 -0.285139   \n",
       "1       -0.716400  -1.0       -1.000000          1.000000 -0.107099   \n",
       "2       -0.716400  -1.0       -1.000000         -0.208419  0.217274   \n",
       "3       -0.716352  -1.0        0.128225          1.000000  0.122274   \n",
       "4       -0.716352  -1.0        1.000000         -0.416904 -0.337604   \n",
       "...           ...   ...             ...               ...       ...   \n",
       "9504847 -0.653242   1.0       -0.884564         -1.000000 -0.254372   \n",
       "9504848 -0.652999   1.0        1.000000          0.142335 -0.305907   \n",
       "9504849 -0.652999   1.0        0.788586         -0.696931 -0.285295   \n",
       "9504850 -0.652756   1.0       -1.000000         -0.066970  0.672761   \n",
       "9504851 -0.652708   1.0       -1.000000          0.630550  0.032134   \n",
       "\n",
       "         Payment_currency  Received_currency  Sender_bank_location  \\\n",
       "0                0.171435            0.23455              0.156459   \n",
       "1                0.171435           -1.00000              0.156459   \n",
       "2                0.171435            0.23455              0.156459   \n",
       "3                0.171435            0.23455              0.156459   \n",
       "4                0.171435            0.23455              0.156459   \n",
       "...                   ...                ...                   ...   \n",
       "9504847          0.171435            0.23455              0.156459   \n",
       "9504848          0.171435            0.23455              0.156459   \n",
       "9504849          0.171435            0.23455              0.156459   \n",
       "9504850          0.171435            0.23455              0.156459   \n",
       "9504851          0.171435            0.23455              0.156459   \n",
       "\n",
       "         Receiver_bank_location  Payment_type  Is_laundering  Laundering_type  \n",
       "0                      0.226096     -1.000000              0        -1.000000  \n",
       "1                     -0.191672      0.793335              0        -0.678404  \n",
       "2                      0.226096     -0.156956              0         1.000000  \n",
       "3                      0.226096     -1.000000              0        -0.989758  \n",
       "4                      0.226096     -1.000000              0        -1.000000  \n",
       "...                         ...           ...            ...              ...  \n",
       "9504847                0.226096     -1.000000              0         1.000000  \n",
       "9504848                0.226096      1.000000              0         1.000000  \n",
       "9504849                0.226096     -1.000000              0         1.000000  \n",
       "9504850                0.226096     -1.000000              0        -0.989758  \n",
       "9504851                0.226096     -1.000000              0        -0.678404  \n",
       "\n",
       "[9504852 rows x 12 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Applying Standard Scaler for Normalisation\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "scaler = StandardScaler()\n",
    "\n",
    "columns_to_norm = ['Time', 'Date', 'Sender_account', 'Receiver_account', 'Amount',\n",
    "       'Payment_currency', 'Received_currency', 'Sender_bank_location',\n",
    "       'Receiver_bank_location', 'Payment_type','Laundering_type']\n",
    "\n",
    "\n",
    "# Apply the StandardScaler to each column individually\n",
    "for column in columns_to_norm:\n",
    "    # Apply StandardScaler to each column\n",
    "    df_t[column] = scaler.fit_transform(df_t[[column]])\n",
    "    \n",
    "    # Clip values to ensure they are within the range [-1, 1]\n",
    "    df_t[column] = np.clip(df_t[column], -1, 1)\n",
    "\n",
    "df_t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating new file to avoid errors - Used for StandardScaler\n",
    "\n",
    "#norm_li_st.to_csv('transactions_norm_standardscaler.csv', index= False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sender_account</th>\n",
       "      <th>Receiver_account</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Payment_currency</th>\n",
       "      <th>Received_currency</th>\n",
       "      <th>Sender_bank_location</th>\n",
       "      <th>Receiver_bank_location</th>\n",
       "      <th>Payment_type</th>\n",
       "      <th>Is_laundering</th>\n",
       "      <th>Laundering_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504847</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504848</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504849</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504850</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504851</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9504852 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Time  Date  Sender_account  Receiver_account  Amount  \\\n",
       "0           0     0               1                 0       0   \n",
       "1           0     0               0                 1       0   \n",
       "2           0     0               0                 0       0   \n",
       "3           0     0               1                 1       0   \n",
       "4           0     0               1                 0       0   \n",
       "...       ...   ...             ...               ...     ...   \n",
       "9504847     0     1               0                 0       0   \n",
       "9504848     0     1               1                 1       0   \n",
       "9504849     0     1               1                 0       0   \n",
       "9504850     0     1               0                 0       0   \n",
       "9504851     0     1               0                 1       0   \n",
       "\n",
       "         Payment_currency  Received_currency  Sender_bank_location  \\\n",
       "0                       1                  1                     1   \n",
       "1                       1                  0                     1   \n",
       "2                       1                  1                     1   \n",
       "3                       1                  1                     1   \n",
       "4                       1                  1                     1   \n",
       "...                   ...                ...                   ...   \n",
       "9504847                 1                  1                     1   \n",
       "9504848                 1                  1                     1   \n",
       "9504849                 1                  1                     1   \n",
       "9504850                 1                  1                     1   \n",
       "9504851                 1                  1                     1   \n",
       "\n",
       "         Receiver_bank_location  Payment_type  Is_laundering  Laundering_type  \n",
       "0                             1             0              0                0  \n",
       "1                             1             1              0                1  \n",
       "2                             1             0              0                1  \n",
       "3                             1             0              0                0  \n",
       "4                             1             0              0                0  \n",
       "...                         ...           ...            ...              ...  \n",
       "9504847                       1             0              0                1  \n",
       "9504848                       1             1              0                1  \n",
       "9504849                       1             0              0                1  \n",
       "9504850                       1             0              0                0  \n",
       "9504851                       1             0              0                1  \n",
       "\n",
       "[9504852 rows x 12 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Applying MinMax Scaler for Normalisation\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "scaler_minmax = MinMaxScaler()\n",
    "\n",
    "columns_to_norm = ['Time', 'Date', 'Sender_account', 'Receiver_account', 'Amount',\n",
    "       'Payment_currency', 'Received_currency', 'Sender_bank_location',\n",
    "       'Receiver_bank_location', 'Payment_type','Laundering_type']\n",
    "\n",
    "\n",
    "# Apply the StandardScaler to each column individually\n",
    "for column in columns_to_norm:\n",
    "    df_t[column] = scaler_minmax.fit_transform(df_t[[column]])\n",
    "    \n",
    "    \n",
    "df_t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sender_account</th>\n",
       "      <th>Receiver_account</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Payment_currency</th>\n",
       "      <th>Received_currency</th>\n",
       "      <th>Sender_bank_location</th>\n",
       "      <th>Receiver_bank_location</th>\n",
       "      <th>Payment_type</th>\n",
       "      <th>Laundering_type</th>\n",
       "      <th>Is_laundering</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504847</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504848</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504849</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504850</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504851</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9504852 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Time  Date  Sender_account  Receiver_account  Amount  \\\n",
       "0           0     0               1                 0       0   \n",
       "1           0     0               0                 1       0   \n",
       "2           0     0               0                 0       0   \n",
       "3           0     0               1                 1       0   \n",
       "4           0     0               1                 0       0   \n",
       "...       ...   ...             ...               ...     ...   \n",
       "9504847     0     1               0                 0       0   \n",
       "9504848     0     1               1                 1       0   \n",
       "9504849     0     1               1                 0       0   \n",
       "9504850     0     1               0                 0       0   \n",
       "9504851     0     1               0                 1       0   \n",
       "\n",
       "         Payment_currency  Received_currency  Sender_bank_location  \\\n",
       "0                       1                  1                     1   \n",
       "1                       1                  0                     1   \n",
       "2                       1                  1                     1   \n",
       "3                       1                  1                     1   \n",
       "4                       1                  1                     1   \n",
       "...                   ...                ...                   ...   \n",
       "9504847                 1                  1                     1   \n",
       "9504848                 1                  1                     1   \n",
       "9504849                 1                  1                     1   \n",
       "9504850                 1                  1                     1   \n",
       "9504851                 1                  1                     1   \n",
       "\n",
       "         Receiver_bank_location  Payment_type  Laundering_type  Is_laundering  \n",
       "0                             1             0                0              0  \n",
       "1                             1             1                1              0  \n",
       "2                             1             0                1              0  \n",
       "3                             1             0                0              0  \n",
       "4                             1             0                0              0  \n",
       "...                         ...           ...              ...            ...  \n",
       "9504847                       1             0                1              0  \n",
       "9504848                       1             1                1              0  \n",
       "9504849                       1             0                1              0  \n",
       "9504850                       1             0                0              0  \n",
       "9504851                       1             0                1              0  \n",
       "\n",
       "[9504852 rows x 12 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rearranging Columns \n",
    "\n",
    "col_norm = ['Time', 'Date', 'Sender_account', 'Receiver_account', 'Amount',\n",
    "       'Payment_currency', 'Received_currency', 'Sender_bank_location',\n",
    "       'Receiver_bank_location', 'Payment_type','Laundering_type', 'Is_laundering']\n",
    "\n",
    "norm_data = df_t[col_norm]\n",
    "\n",
    "norm_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sender_account</th>\n",
       "      <th>Receiver_account</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Payment_currency</th>\n",
       "      <th>Received_currency</th>\n",
       "      <th>Sender_bank_location</th>\n",
       "      <th>Receiver_bank_location</th>\n",
       "      <th>Payment_type</th>\n",
       "      <th>Laundering_type</th>\n",
       "      <th>Is_laundering</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Time  Date  Sender_account  Receiver_account  Amount  Payment_currency  \\\n",
       "0     0     0               1                 0       0                 1   \n",
       "1     0     0               0                 1       0                 1   \n",
       "2     0     0               0                 0       0                 1   \n",
       "3     0     0               1                 1       0                 1   \n",
       "4     0     0               1                 0       0                 1   \n",
       "\n",
       "   Received_currency  Sender_bank_location  Receiver_bank_location  \\\n",
       "0                  1                     1                       1   \n",
       "1                  0                     1                       1   \n",
       "2                  1                     1                       1   \n",
       "3                  1                     1                       1   \n",
       "4                  1                     1                       1   \n",
       "\n",
       "   Payment_type  Laundering_type  Is_laundering  \n",
       "0             0                0              0  \n",
       "1             1                1              0  \n",
       "2             0                1              0  \n",
       "3             0                0              0  \n",
       "4             0                0              0  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a DataFrame from the normalised data\n",
    "\n",
    "norm_li_st = pd.DataFrame(norm_data, columns = col_norm)\n",
    "norm_li_st.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sender_account</th>\n",
       "      <th>Receiver_account</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Payment_currency</th>\n",
       "      <th>Received_currency</th>\n",
       "      <th>Sender_bank_location</th>\n",
       "      <th>Receiver_bank_location</th>\n",
       "      <th>Payment_type</th>\n",
       "      <th>Laundering_type</th>\n",
       "      <th>Is_laundering</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.716449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.775333</td>\n",
       "      <td>-0.285139</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.716400</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.107099</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>-1.00000</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>-0.191672</td>\n",
       "      <td>0.793335</td>\n",
       "      <td>-0.678404</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.716400</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-0.208419</td>\n",
       "      <td>0.217274</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-0.156956</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.716352</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.128225</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.122274</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-0.989758</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.716352</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.416904</td>\n",
       "      <td>-0.337604</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504847</th>\n",
       "      <td>-0.653242</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.884564</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-0.254372</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504848</th>\n",
       "      <td>-0.652999</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.142335</td>\n",
       "      <td>-0.305907</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504849</th>\n",
       "      <td>-0.652999</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.788586</td>\n",
       "      <td>-0.696931</td>\n",
       "      <td>-0.285295</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504850</th>\n",
       "      <td>-0.652756</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-0.066970</td>\n",
       "      <td>0.672761</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-0.989758</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504851</th>\n",
       "      <td>-0.652708</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.630550</td>\n",
       "      <td>0.032134</td>\n",
       "      <td>0.171435</td>\n",
       "      <td>0.23455</td>\n",
       "      <td>0.156459</td>\n",
       "      <td>0.226096</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-0.678404</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9504852 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Time  Date  Sender_account  Receiver_account    Amount  \\\n",
       "0       -0.716449  -1.0        1.000000         -0.775333 -0.285139   \n",
       "1       -0.716400  -1.0       -1.000000          1.000000 -0.107099   \n",
       "2       -0.716400  -1.0       -1.000000         -0.208419  0.217274   \n",
       "3       -0.716352  -1.0        0.128225          1.000000  0.122274   \n",
       "4       -0.716352  -1.0        1.000000         -0.416904 -0.337604   \n",
       "...           ...   ...             ...               ...       ...   \n",
       "9504847 -0.653242   1.0       -0.884564         -1.000000 -0.254372   \n",
       "9504848 -0.652999   1.0        1.000000          0.142335 -0.305907   \n",
       "9504849 -0.652999   1.0        0.788586         -0.696931 -0.285295   \n",
       "9504850 -0.652756   1.0       -1.000000         -0.066970  0.672761   \n",
       "9504851 -0.652708   1.0       -1.000000          0.630550  0.032134   \n",
       "\n",
       "         Payment_currency  Received_currency  Sender_bank_location  \\\n",
       "0                0.171435            0.23455              0.156459   \n",
       "1                0.171435           -1.00000              0.156459   \n",
       "2                0.171435            0.23455              0.156459   \n",
       "3                0.171435            0.23455              0.156459   \n",
       "4                0.171435            0.23455              0.156459   \n",
       "...                   ...                ...                   ...   \n",
       "9504847          0.171435            0.23455              0.156459   \n",
       "9504848          0.171435            0.23455              0.156459   \n",
       "9504849          0.171435            0.23455              0.156459   \n",
       "9504850          0.171435            0.23455              0.156459   \n",
       "9504851          0.171435            0.23455              0.156459   \n",
       "\n",
       "         Receiver_bank_location  Payment_type  Laundering_type  Is_laundering  \n",
       "0                      0.226096     -1.000000        -1.000000              0  \n",
       "1                     -0.191672      0.793335        -0.678404              0  \n",
       "2                      0.226096     -0.156956         1.000000              0  \n",
       "3                      0.226096     -1.000000        -0.989758              0  \n",
       "4                      0.226096     -1.000000        -1.000000              0  \n",
       "...                         ...           ...              ...            ...  \n",
       "9504847                0.226096     -1.000000         1.000000              0  \n",
       "9504848                0.226096      1.000000         1.000000              0  \n",
       "9504849                0.226096     -1.000000         1.000000              0  \n",
       "9504850                0.226096     -1.000000        -0.989758              0  \n",
       "9504851                0.226096     -1.000000        -0.678404              0  \n",
       "\n",
       "[9504852 rows x 12 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_t = pd.read_csv('transactions_norm_standardscaler.csv')\n",
    "all_t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# norm_li_st.to_csv('transactions_norm_minmax.csv', index= False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sender_account</th>\n",
       "      <th>Receiver_account</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Payment_currency</th>\n",
       "      <th>Received_currency</th>\n",
       "      <th>Sender_bank_location</th>\n",
       "      <th>Receiver_bank_location</th>\n",
       "      <th>Payment_type</th>\n",
       "      <th>Laundering_type</th>\n",
       "      <th>Is_laundering</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504847</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504848</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504849</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504850</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9504851</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9504852 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Time  Date  Sender_account  Receiver_account  Amount  \\\n",
       "0           0     0               1                 0       0   \n",
       "1           0     0               0                 1       0   \n",
       "2           0     0               0                 0       0   \n",
       "3           0     0               1                 1       0   \n",
       "4           0     0               1                 0       0   \n",
       "...       ...   ...             ...               ...     ...   \n",
       "9504847     0     1               0                 0       0   \n",
       "9504848     0     1               1                 1       0   \n",
       "9504849     0     1               1                 0       0   \n",
       "9504850     0     1               0                 0       0   \n",
       "9504851     0     1               0                 1       0   \n",
       "\n",
       "         Payment_currency  Received_currency  Sender_bank_location  \\\n",
       "0                       1                  1                     1   \n",
       "1                       1                  0                     1   \n",
       "2                       1                  1                     1   \n",
       "3                       1                  1                     1   \n",
       "4                       1                  1                     1   \n",
       "...                   ...                ...                   ...   \n",
       "9504847                 1                  1                     1   \n",
       "9504848                 1                  1                     1   \n",
       "9504849                 1                  1                     1   \n",
       "9504850                 1                  1                     1   \n",
       "9504851                 1                  1                     1   \n",
       "\n",
       "         Receiver_bank_location  Payment_type  Laundering_type  Is_laundering  \n",
       "0                             1             0                0              0  \n",
       "1                             1             1                1              0  \n",
       "2                             1             0                1              0  \n",
       "3                             1             0                0              0  \n",
       "4                             1             0                0              0  \n",
       "...                         ...           ...              ...            ...  \n",
       "9504847                       1             0                1              0  \n",
       "9504848                       1             1                1              0  \n",
       "9504849                       1             0                1              0  \n",
       "9504850                       1             0                0              0  \n",
       "9504851                       1             0                1              0  \n",
       "\n",
       "[9504852 rows x 12 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_tminmax = pd.read_csv('transactions_norm_minmax.csv')\n",
    "all_tminmax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}